import{_ as e,c as a,o as t,R as o}from"./chunks/framework.d3b45b72.js";const b=JSON.parse('{"title":"链表-概况","description":"","frontmatter":{},"headers":[],"relativePath":"data-structure/linked-list/index.md","filePath":"data-structure/linked-list/index.md"}'),i={name:"data-structure/linked-list/index.md"},l=o('<h1 id="链表-概况" tabindex="-1">链表-概况 <a class="header-anchor" href="#链表-概况" aria-label="Permalink to &quot;链表-概况&quot;">​</a></h1><p>用一组任意存储的单元来存储线性表的数据元素。一个对象存储着本身的值和下一个元素的地址。</p><ul><li>需要遍历才能查询到元素，查询慢。</li><li>插入元素只需断开连接重新赋值，插入快。</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/8/20/16cac3547bfafcbc~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.awebp" alt="alt"></p><p>链表在开发中也是经常用到的数据结构，<code>React16</code> 的 <code>Fiber Node</code> 连接起来形成的 <code>Fiber Tree</code>, 就是个单链表结构。</p><h2 id="基本应用" tabindex="-1">基本应用 <a class="header-anchor" href="#基本应用" aria-label="Permalink to &quot;基本应用&quot;">​</a></h2><blockquote><p>主要是对链表基本概念和特性的应用</p></blockquote><h2 id="环类题目" tabindex="-1">环类题目 <a class="header-anchor" href="#环类题目" aria-label="Permalink to &quot;环类题目&quot;">​</a></h2><blockquote><p>环类题目即从判断一个单链表是否存在循环而扩展衍生的问题</p></blockquote><h2 id="双指针" tabindex="-1">双指针 <a class="header-anchor" href="#双指针" aria-label="Permalink to &quot;双指针&quot;">​</a></h2><blockquote><p>双指针的思想在链表和数组中的题目都经常会用到，主要是利用两个或多个不同位置的指针，通过速度和方向的变换解决问题。</p></blockquote><ul><li>两个指针从不同位置出发：一个从始端开始，另一个从末端开始；</li><li>两个指针以不同速度移动：一个指针快一些，另一个指针慢一些。 对于单链表，因为我们只能在一个方向上遍历链表，所以第一种情景可能无法工作。然而，第二种情景，也被称为慢指针和快指针技巧，是非常有用的。</li></ul>',12),r=[l];function c(s,d,n,u,p,h){return t(),a("div",null,r)}const m=e(i,[["render",c]]);export{b as __pageData,m as default};
