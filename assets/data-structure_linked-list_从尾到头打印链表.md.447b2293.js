import{_ as s,c as a,o as n,R as l}from"./chunks/framework.d3b45b72.js";const h=JSON.parse('{"title":"从尾到头打印链表","description":"","frontmatter":{},"headers":[],"relativePath":"data-structure/linked-list/从尾到头打印链表.md","filePath":"data-structure/linked-list/从尾到头打印链表.md"}'),o={name:"data-structure/linked-list/从尾到头打印链表.md"},e=l(`<h1 id="从尾到头打印链表" tabindex="-1">从尾到头打印链表 <a class="header-anchor" href="#从尾到头打印链表" aria-label="Permalink to &quot;从尾到头打印链表&quot;">​</a></h1><h2 id="题目" tabindex="-1">题目 <a class="header-anchor" href="#题目" aria-label="Permalink to &quot;题目&quot;">​</a></h2><p>输入一个链表，按链表值从尾到头的顺序返回一个<code>ArrayList</code>。</p><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><p>要了解链表的数据结构：</p><p><code>val</code>属性存储当前的值，<code>next</code>属性存储下一个节点的引用。</p><p>要遍历链表就是不断找到当前节点的<code>next</code>节点，当<code>next</code>节点是<code>null</code>时，说明是最后一个节点，停止遍历。</p><p>因为是从尾到头的顺序，使用一个队列来存储打印结果，每次从队列头部插入。</p><h2 id="代码" tabindex="-1">代码 <a class="header-anchor" href="#代码" aria-label="Permalink to &quot;代码&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">printListFromTailToHead</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">head</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">head</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unshift</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">head</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">head</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">head</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">next</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">array</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,10),p=[e];function t(c,r,i,y,F,d){return n(),a("div",null,p)}const _=s(o,[["render",t]]);export{h as __pageData,_ as default};
